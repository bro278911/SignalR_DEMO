@{
    ViewData["Title"] = "SQL Test";
}

<div class="container">
    <h2>SignalR + SQL Dependency + SQL Server測試</h2>
    
    <!-- 添加狀態指示器的容器 -->
    <div id="statusContainer" class="mb-3"></div>
    
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Database Changes Log</h5>
                    <div id="messageLog" style="height: 200px; overflow-y: auto; border: 1px solid #ccc; padding: 10px;">
                    </div>
                    <div id="table"></div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script>
        const hubConnection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .withAutomaticReconnect()
            .configureLogging(signalR.LogLevel.Debug)
            .build();

        let retryCount = 0;
        const maxRetries = 5;

        function log(message, isError = false) {
            const messageLog = document.getElementById("messageLog");
            const messageDiv = document.createElement("div");
            messageDiv.className = isError ? "text-danger" : "text-success";
            messageDiv.textContent = `${new Date().toLocaleTimeString()}: ${message}`;
            
            // 如果已經有超過100條消息，移除最舊的
            while (messageLog.children.length >= 100) {
                messageLog.removeChild(messageLog.lastChild);
            }
            
            messageLog.insertBefore(messageDiv, messageLog.firstChild);
        }

        hubConnection.on("ReceiveMessage", function (message) {
            log(message);
        });

        hubConnection.on("ReceiveError", function (message) {
            log(message, true);
        });

        hubConnection.on("ReceiveDatabaseUpdate", function (data) {
            if (!data || !Array.isArray(data) || data.length === 0) {
                log("收到空的數據更新", true);
                return;
            }

            const messageLog = document.getElementById("messageLog");
            const dataDiv = document.createElement("div");
            dataDiv.className = "mt-3 p-2 border rounded bg-light";
            
            // 創建表格
            let tableHtml = `
                <h6 class="mb-3">最新資料 (${new Date().toLocaleTimeString()})</h6>
                <div class="table-responsive">
                    <table class="table table-striped table-sm table-bordered">
                        <thead class="table-dark">
                            <tr style="color:black">
                                <th>充電站ID</th>
                                <th>站點ID</th>
                                <th>SOC (%)</th>
                                <th>kWh</th>
                                <th>功率 (kW)</th>
                                <th>電源狀態</th>
                                <th>PCS狀態</th>
                                <th>時間</th>
                            </tr>
                        </thead>
                        <tbody>
            `;

            // 添加數據行
            data.forEach(item => {
                try {
                    tableHtml += `
                        <tr>
                            <td>${item.chargingID || 'N/A'}</td>
                            <td>${item.siteID || 'N/A'}</td>
                            <td>${item.soc ? item.soc.toFixed(1) : 'N/A'}</td>
                            <td>${item.kWh ? item.kWh.toFixed(1) : 'N/A'}</td>
                            <td>${item.pcsPower ? item.pcsPower.toFixed(1) : 'N/A'}</td>
                            <td>${getStatusText(item.powerStatus)}</td>
                            <td>${getPCSStatusText(item.pcsStatus)}</td>
                            <td>${item.datatime ? new Date(item.datatime).toLocaleString() : 'N/A'}</td>
                        </tr>
                    `;
                } catch (err) {
                    console.error('處理數據行時發生錯誤:', err, item);
                }
            });

            tableHtml += `
                        </tbody>
                    </table>
                </div>
            `;

            dataDiv.innerHTML = tableHtml;
            
            // 清空之前的表格（如果有的話）
            const oldTable = messageLog.querySelector('.table-responsive');
            if (oldTable) {
                oldTable.parentElement.remove();
            }
            
            table.innerHTML = dataDiv.innerHTML;
            // 插入新表格
            messageLog.insertBefore(messageLog.firstChild);
            
            log(`收到數據庫更新，共 ${data.length} 筆資料`);
        });

        function getStatusText(status) {
            switch (status) {
                case 0: return '<span class="text-danger">離線</span>';
                case 1: return '<span class="text-success">在線</span>';
                default: return `未知(${status})`;
            }
        }

        function getPCSStatusText(status) {
            switch (status) {
                case 0: return '<span class="text-danger">故障</span>';
                case 1: return '<span class="text-success">正常</span>';
                default: return `未知(${status})`;
            }
        }

        async function startConnection() {
            try {
                if (hubConnection.state === signalR.HubConnectionState.Connected) {
                    log("已經連接到 SignalR");
                    return;
                }

                if (hubConnection.state !== signalR.HubConnectionState.Disconnected) {
                    log("等待連接狀態變更...");
                    await new Promise(resolve => setTimeout(resolve, 1000));
                    return startConnection();
                }

                log("正在連接到 SignalR...");
                await hubConnection.start();
                log("SignalR 連接成功");
                retryCount = 0;
                updateConnectionStatus("已連接");
                
            } catch (err) {
                updateConnectionStatus("連接失敗");
                log(`連接錯誤: ${err.message}`, true);
                console.error("SignalR 連接錯誤:", err);
                
                retryCount++;
                if (retryCount < maxRetries) {
                    log(`${retryCount}/${maxRetries} 次重試中，5 秒後重試...`);
                    setTimeout(startConnection, 5000);
                } else {
                    log("已達到最大重試次數，請重新整理頁面", true);
                }
            }
        }

        function updateConnectionStatus(status) {
            let statusDiv = document.getElementById("connectionStatus");
            const statusContainer = document.getElementById("statusContainer");
            
            if (!statusDiv) {
                statusDiv = document.createElement("div");
                statusDiv.id = "connectionStatus";
                statusContainer.appendChild(statusDiv);
            }
            
            const statusClasses = {
                "已連接": "alert-success",
                "已斷開": "alert-danger",
                "重新連接中": "alert-warning",
                "連接失敗": "alert-danger"
            };
            
            statusDiv.className = `alert ${statusClasses[status] || 'alert-info'} mb-0`;
            statusDiv.innerHTML = `<strong>SignalR 狀態:</strong> ${status}`;
        }

        hubConnection.onclose(async () => {
            updateConnectionStatus("已斷開");
            log("SignalR 連接已斷開", true);
            await startConnection();
        });

        hubConnection.onreconnecting(error => {
            updateConnectionStatus("重新連接中");
            log(`SignalR 重新連接中: ${error ? error.message : '未知錯誤'}`, true);
        });

        hubConnection.onreconnected(connectionId => {
            updateConnectionStatus("已連接");
            log(`SignalR 已重新連接。連接 ID: ${connectionId}`);
        });

        // 啟動連接
        startConnection();
    </script>
}
